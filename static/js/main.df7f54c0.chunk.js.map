{"version":3,"sources":["Todo.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todo","index","finishTodo","deleteTodo","className","style","textDecoration","finished","title","onClick","AddTodo","addTodo","useState","val","SetVal","onSubmit","e","preventDefault","type","value","onChange","target","App","todosLocalStorage","JSON","parse","localStorage","getItem","getTodos","todos","pushTodos","newTodos","setItem","stringify","setTodos","splice","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8NAEe,SAASA,EAAT,GAAsD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WACnD,OACI,yBAAKC,UAAU,OAAQC,MAAO,CAACC,eAAgBN,EAAKO,SAAW,eAAiB,SAC3EP,EAAKQ,MACN,6BACI,4BAAQJ,UAAU,cAAcK,QAAU,kBAAMP,EAAWD,KACvD,uBAAGG,UAAU,mCAEjB,4BAAQA,UAAU,cAAeK,QAAU,kBAAMN,EAAWF,KACxD,uBAAGG,UAAU,qCCTlB,SAASM,EAAT,GAA6B,IAAXC,EAAU,EAAVA,QAAU,EAElBC,mBAAS,IAFS,mBAEhCC,EAFgC,KAE5BC,EAF4B,KAavC,OACI,0BAAMC,SARW,SAACC,GAClBA,EAAEC,iBACS,KAARJ,IACHF,EAAQE,GACRC,EAAO,OAKH,2BAAOI,KAAK,OAAOC,MAAON,EAAKO,SAAU,SAAAJ,GAAC,OAAIF,EAAOE,EAAEK,OAAOF,WCiD3DG,MA7Df,WAEE,IAAIC,EAAoBC,KAAKC,MAAMC,aAAaC,QAAQ,UAElDC,EAAW,SAACC,GACRL,KAAKC,MAAMC,aAAaC,QAAQ,UAChB,MAArBJ,IAA2BA,EAAoB,KAG9CO,EAAY,SAACC,GACjBL,aAAaM,QAAQ,QAAQR,KAAKS,UAAUF,KAVjC,EAccnB,mBAA8B,MAArBW,EAA4B,GAAKA,GAdxD,mBAcLM,EAdK,KAcEK,EAdF,KAebN,IAEA,IAOM1B,EAAa,SAACD,GAClB,IAAM8B,EAAQ,YAAOF,GACrBE,EAAS9B,GAAOM,UAAW,EAC3B2B,EAASH,GACTD,EAAUC,GACVH,KAGIzB,EAAa,SAACF,GAClB,IAAM8B,EAAQ,YAAOF,GACrBE,EAASI,OAAOlC,EAAM,GACtBiC,EAASH,GACTD,EAAUC,GACVH,KAGF,OACE,yBAAKxB,UAAU,OACb,yCACA,yBAAKA,UAAU,aACrB,kBAACM,EAAD,CAASC,QA3BS,SAACH,GACf,IAAMuB,EAAQ,sBAAOF,GAAP,CAAa,CAACrB,WAC5B0B,EAASH,GACTD,EAAUC,GACVH,OAwBKC,EAAMO,KAAI,SAACpC,EAAKC,GAAN,OAET,kBAACF,EAAD,CACEsC,IAAKpC,EACLD,KAAMA,EACNC,MAAOA,EACPC,WAAYA,EACXC,WAAYA,UC7CLmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.df7f54c0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Todo({todo, index, finishTodo, deleteTodo}) {\r\n    return (\r\n        <div className=\"todo\"  style={{textDecoration: todo.finished ? \"line-through\" : \"none\"}}>\r\n            {todo.title}\r\n            <div>\r\n                <button className=\"icon-button\" onClick= {() => finishTodo(index)}>\r\n                    <i className=\"fas fa-check last-icon finish\"></i>\r\n                </button>\r\n                <button className=\"icon-button\"  onClick= {() => deleteTodo(index)}>\r\n                    <i className=\"fas fa-trash-alt  last delete\"></i>\r\n                </button>\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function AddTodo({addTodo}) {\r\n\r\n    const [val,SetVal] = useState('')\r\n\r\n\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault()\r\n        if(val === \"\") return\r\n        addTodo(val);\r\n        SetVal(\"\");\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={val} onChange={e => SetVal(e.target.value)}/>\r\n        </form>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport Todo from './Todo'\nimport AddTodo from './AddTodo';\n\nfunction App() {\n  \n  var todosLocalStorage = JSON.parse(localStorage.getItem(\"todos\"))\n\n  const getTodos = (todos) => {\n    todos = JSON.parse(localStorage.getItem(\"todos\"))\n    if(todosLocalStorage == null) todosLocalStorage = []\n  }\n\n  const pushTodos = (newTodos) => {\n    localStorage.setItem(\"todos\",JSON.stringify(newTodos))\n  }\n\n\n   const [todos, setTodos] = useState(todosLocalStorage == null ? [] : todosLocalStorage)\n  getTodos(todos)\n\n  const addTodo = (title) => {\n    const newTodos = [...todos,{title}];\n    setTodos(newTodos);\n    pushTodos(newTodos)\n    getTodos(todos)\n  }\n\n  const finishTodo = (index) =>{\n    const newTodos = [...todos]\n    newTodos[index].finished = true\n    setTodos(newTodos)\n    pushTodos(newTodos)\n    getTodos(todos)\n  }\n\n  const deleteTodo = (index) => {\n    const newTodos = [...todos]\n    newTodos.splice(index,1)\n    setTodos(newTodos)\n    pushTodos(newTodos)\n    getTodos(todos)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>To Do App</h1>\n      <div className=\"container\">\n<AddTodo addTodo={addTodo}/>\n        {todos.map((todo,index) => (\n        \n          <Todo\n            key={index}\n            todo={todo}\n            index={index}\n            finishTodo={finishTodo}\n             deleteTodo={deleteTodo}\n          />  \n          ))}\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}